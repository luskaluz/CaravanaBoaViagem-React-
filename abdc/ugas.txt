// src/components/Admin/FormularioCaravana.js

import React, { useState, useEffect, useMemo } from 'react';
import * as api from '../../../services/api';
import styles from './FormularioCaravana.module.css';

function FormularioCaravana({ caravana, onSalvar, onCancelar, localidadeId: propLocalidadeId }) {
    const [localidadeId, setLocalidadeId] = useState('');
    const [data, setData] = useState('');
    const [horarioSaida, setHorarioSaida] = useState('');
    const [vagasTotais, setVagasTotais] = useState('');
    const [despesas, setDespesas] = useState('');
    const [lucroAbsoluto, setLucroAbsoluto] = useState('');
    const [ocupacaoMinima, setOcupacaoMinima] = useState('');
    const [administradorId, setAdministradorId] = useState('');
    const [localidades, setLocalidades] = useState([]);
    const [funcionarios, setFuncionarios] = useState([]);
    const [precoPorPessoa, setPrecoPorPessoa] = useState(0);
    const [lucroMaximo, setLucroMaximo] = useState(0);
    const [retornoSobreInvestimento, setRetornoSobreInvestimento] = useState(0);

    const [error, setError] = useState(null);


      const precoCalculado = useMemo(() => {
        if (despesas && lucroAbsoluto && ocupacaoMinima && vagasTotais) {
            const despesasNum = parseFloat(despesas);
            const lucroAbsolutoNum = parseFloat(lucroAbsoluto);
            const ocupacaoMinimaNum = parseInt(ocupacaoMinima, 10);
            const vagasTotaisNum = parseInt(vagasTotais, 10);

            if (ocupacaoMinimaNum <= 0 || ocupacaoMinimaNum > vagasTotaisNum) {
                return 0;
            }

            if (ocupacaoMinimaNum > 0) {
                const preco = (despesasNum + lucroAbsolutoNum) / ocupacaoMinimaNum;
                return Math.ceil(preco);
            }
        }
        return 0;
    }, [despesas, lucroAbsoluto, ocupacaoMinima, vagasTotais]);


    const { lucroMaximoCalculado, roiCalculado } = useMemo(() => {
        if (despesas && vagasTotais && precoCalculado) {
            const despesasNum = parseFloat(despesas);
            const vagasTotaisNum = parseInt(vagasTotais, 10);
            const precoNum = parseFloat(precoCalculado)

            if(vagasTotaisNum > 0){
              const lucroMax = (precoNum * vagasTotaisNum) - despesasNum;
              const roi = despesasNum > 0 ? (lucroMax / despesasNum) * 100 : 0;
               return { lucroMaximoCalculado: lucroMax, roiCalculado: roi };
            }

        }
        return { lucroMaximoCalculado: 0, roiCalculado: 0 };
    }, [despesas, vagasTotais, precoCalculado]);




    useEffect(() => {
        if(precoCalculado !== precoPorPessoa){
            setPrecoPorPessoa(precoCalculado)
        }

        if (lucroMaximoCalculado !== lucroMaximo) {
            setLucroMaximo(lucroMaximoCalculado);
        }
        if (roiCalculado !== retornoSobreInvestimento) {
             setRetornoSobreInvestimento(roiCalculado);
        }

    }, [precoCalculado, lucroMaximoCalculado, roiCalculado, precoPorPessoa, lucroMaximo, retornoSobreInvestimento]);



    useEffect(() => {
        const carregarDados = async () => {

            try {
                const localidadesData = await api.getLocalidades();
                setLocalidades(localidadesData);

                const funcionariosData = await api.getFuncionarios();
                setFuncionarios(funcionariosData);


                if (caravana) {
                    setLocalidadeId(caravana.localidadeId || '');
                    setData(caravana.data ? new Date(caravana.data).toISOString().split('T')[0] : '');
                    setHorarioSaida(caravana.horarioSaida || '');
                    setVagasTotais(caravana.vagasTotais || '');
                    setDespesas(caravana.despesas || '');
                    setLucroAbsoluto(caravana.lucroAbsoluto || '');
                    setOcupacaoMinima(caravana.ocupacaoMinima || '');
                    setAdministradorId(caravana.administradorId || '');
                    setPrecoPorPessoa(caravana.preco || precoCalculado);
                    setLucroMaximo(caravana.lucroMaximo || 0)

                } else if (propLocalidadeId) {
                    setLocalidadeId(propLocalidadeId);
                }

            } catch (error) {
                setError(error.message);
                console.error("Erro ao carregar dados:", error)
            } 
        };

        carregarDados();
    }, [caravana, propLocalidadeId,precoCalculado]);



    const handleSubmit = async (event) => {
        event.preventDefault();
        if (!localidadeId || !data || !vagasTotais || !despesas || !lucroAbsoluto || !ocupacaoMinima) {
            setError("Preencha todos os campos obrigatórios.");
            return;
        }

        const ocupacaoMinimaNum = parseInt(ocupacaoMinima, 10);
        const vagasTotaisNum = parseInt(vagasTotais, 10);

          if (ocupacaoMinimaNum <= 0 || ocupacaoMinimaNum > vagasTotaisNum) {
             setError("A ocupação mínima deve ser maior que zero e menor ou igual ao número total de vagas.");
              return;
          }

        const dataFormatada = new Date(data);

        const caravanaData = {
            localidadeId,
            data: dataFormatada,
            horarioSaida,
            vagasTotais: parseInt(vagasTotais, 10),
            vagasDisponiveis: parseInt(vagasTotais, 10),
            despesas: parseFloat(despesas),
            lucroAbsoluto: parseFloat(lucroAbsoluto),
            ocupacaoMinima: parseInt(ocupacaoMinima, 10),
            administradorId: administradorId || null,
            preco: precoPorPessoa,
            lucroMaximo,

        };

        try {

            setError(null);
             if (caravana) {
               await api.updateCaravana(caravana.id, caravanaData);
                alert("Caravana atualizada!");
           } else {
                await api.createCaravana(caravanaData);
               alert("Caravana criada!");
          }
          onSalvar();

        } catch (error) {
            setError(error.message);
            console.error("Erro ao salvar caravana:", error);
        } 
    };


    return (
        <div className={styles.container}> 
            <div className={styles.modalContent}>

                {error && <div className={styles.error}>{error}</div>}
                <form onSubmit={handleSubmit} className={styles.form}>
                    <label htmlFor="localidade">Localidade:</label>
                    <select
                        id="localidade"
                        value={localidadeId}
                        onChange={(e) => setLocalidadeId(e.target.value)}
                        className={styles.select}
                        disabled={!!propLocalidadeId}
                    >
                        <option value="">Selecione uma localidade</option>
                        {localidades.map((localidade) => (
                            <option key={localidade.id} value={localidade.id}>
                                {localidade.nome}
                            </option>
                        ))}
                    </select>

                    <label htmlFor="data">Data:</label>
                    <input
                        type="date"
                        id="data"
                        value={data}
                        onChange={(e) => setData(e.target.value)}
                        className={styles.input}
                    />

                    <label htmlFor="horarioSaida">Horário de Saída:</label>
                    <input
                        type="time"
                        id="horarioSaida"
                        value={horarioSaida}
                        onChange={(e) => setHorarioSaida(e.target.value)}
                        className={styles.input}
                    />

                    <label htmlFor="vagasTotais">Vagas Totais:</label>
                    <input
                        type="number"
                        id="vagasTotais"
                        value={vagasTotais}
                        onChange={(e) => setVagasTotais(e.target.value)}
                        className={styles.input}
                    />

                    <label htmlFor="despesas">Despesas (estimadas):</label>
                    <input
                        type="number"
                        id="despesas"
                        value={despesas}
                        onChange={(e) => setDespesas(e.target.value)}
                        className={styles.input}
                    />

                    <label htmlFor="ocupacaoMinima">Ocupação Mínima (absoluta):</label>
                    <input
                        type="number"
                        id="ocupacaoMinima"
                        value={ocupacaoMinima}
                        onChange={(e) => setOcupacaoMinima(e.target.value)}
                        className={styles.input}
                    />

                    <label htmlFor="lucroAbsoluto">Lucro Desejado minimo (absoluto em reais):</label>
                    <input
                        type="number"
                        id="lucroAbsoluto"
                        value={lucroAbsoluto}
                        onChange={(e) => setLucroAbsoluto(e.target.value)}
                        className={styles.input}
                    />
                    <label htmlFor="precoPorPessoa">Preço do Ingresso:</label>
                    <input
                        type="number"
                        id="precoPorPessoa"
                        value={precoPorPessoa}
                        onChange={(e) => setPrecoPorPessoa(parseFloat(e.target.value))}
                        className={styles.input}
                    />

                    <label htmlFor="lucroMaximo">Lucro Máximo (100% de ocupação):</label>
                    <input
                        type="text"
                        id="lucroMaximo"
                        value={`R$ ${lucroMaximo.toFixed(2)}`}
                        readOnly
                        className={styles.input}
                    />

                    <label htmlFor="retornoSobreInvestimento">Retorno Sobre Investimento minimo (ROI):</label>
                    <input
                        type="text"
                        id="retornoSobreInvestimento"
                        value={`${retornoSobreInvestimento.toFixed(2)}%`}
                        readOnly
                        className={styles.input}
                    />

                    <label htmlFor="administrador">Administrador da caravana:</label>
                    <select
                        id="administrador"
                        value={administradorId}
                        onChange={(e) => setAdministradorId(e.target.value)}
                        className={styles.select}
                    >
                        <option value="">Selecione um administrador</option>
                        {funcionarios.map((func) => (
                            <option key={func.id} value={func.id}>
                                {func.nome}
                            </option>
                        ))}
                    </select>

                    <div className={styles.buttonGroup}>
                        <button type="submit" className={styles.saveButton}>Salvar</button>
                        <button type="button" onClick={onCancelar} className={styles.cancelButton}>
                            Cancelar
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
}

export default FormularioCaravana;
